apply plugin: 'installer-platform-plugin'

def worldpayExtensions = "worldpayapi,worldpayaddon,worldpaycscockpit,worldpaynotificationaddon,worldpayresponsemock,worldpaytests,worldpaysampledataaddon,worldpayaddonbackoffice,worldpayfulfilment,worldpayoms,worldpayasm"


def ext = {
    scanPathWithAutoLoad '${HYBRIS_BIN_DIR}/custom'
    scanPathWithAutoLoad '${HYBRIS_BIN_DIR}/ext-worldpay'
    scanPathWithAutoLoad '${HYBRIS_BIN_DIR}/ext-worldpaytest'
    scanPathWithAutoLoad '${HYBRIS_BIN_DIR}/ext-worldpaydemo'
    scanPathWithAutoLoad '${HYBRIS_BIN_DIR}/ext-worldpayfulfilment'
    scanPathWithAutoLoad '${HYBRIS_BIN_DIR}/ext-worldpayoms'
    scanPathWithAutoLoad '${HYBRIS_BIN_DIR}/ext-worldpayasm'

    extensionNames 'backoffice',
            'commerceservicesbackoffice',
            'commercesearchbackoffice',
            'solrfacetsearchbackoffice',
            'platformwebservices',
            'electronicsstore',
            'apparelstore',
            'warehousingbackoffice',
            'warehousing',
            'platformbackoffice',
            'solrserver',
            'ordermanagementwebservices',
            'customersupportbackoffice',
            'ordermanagementaddon',
            'warehousingwebservices',
            'warehousingfacade',
            'ordermanagementwebservices',
            'ordermanagementfacade',
            'assistedservicestorefront'
}

def config = {
    extensions ext
}

task setup << {
    apply plugin: 'installer-addon-plugin'

    def pl = platform(config)
    pl.setup()

    delete "${suiteHome}/hybris/bin/custom"

    pl.executeAntTarget "modulegen -Dinput.module='accelerator' -Dinput.name=${modulegenAcceleratorName} -Dinput.package=${modulegenAcceleratorPackage}"

    def defaultAddons = "worldpayaddon,worldpaynotificationaddon,worldpaysampledataaddon,assistedservicestorefront"
    def addons = "${deploymentType}".contains('demo') ? "${defaultAddons},liveeditaddon,${modulegenAcceleratorName}b2cdemo" : "${defaultAddons}"

    pl.project.addons {
        names "${addons}"
        template "yacceleratorstorefront"
        storeFronts "${modulegenAcceleratorName}storefront"
        platform pl
    }
}

task copyLibrary(type: Copy) {
    from "${libraryLocation}/worldpay-core-${libraryVersion}-SNAPSHOT.jar"
    from "${libraryLocation}/worldpay-core-${libraryVersion}-SNAPSHOT-javadoc.jar"

    into "${suiteHome}/hybris/bin/ext-worldpay/worldpayapi/lib/"
}

task jacocoTests << {
    def pl = platform(config)
    pl.build()
    pl.executeAntTarget "jacocounittests " +
            "-f ${suiteHome}/build/jacoco/build.xml " +
            "-Dtestclasses.packages=com.worldpay.* " +
            "-Dtestclasses.extensions=${worldpayExtensions},${modulegenAcceleratorName}storefront " +
            "-Dtestclasses.addonname=${modulegenAcceleratorName}storefront"
}

