import groovy.json.JsonSlurper
import java.text.SimpleDateFormat

apply plugin: 'installer-platform-plugin'

def worldpayExtensions = "worldpayapi,worldpayaddon,worldpaycscockpit,worldpaynotificationaddon,worldpayresponsemock,worldpaytests,worldpaysampledataaddon,worldpayaddonbackoffice,worldpayfulfilment,worldpayasm"

def localProps = {
    customConfig 'local.properties'
    if ("${dbType}" != 'hsqldb') {
        property 'db.url', "jdbc:${dbType}://${mysqlHost}:${mysqlPort}/${mysqlSchema}?useConfigs=maxPerformance&characterEncoding=utf8"
        property 'db.username', "${dbUsername}"
        property 'db.password', "${dbPassword}"
        property 'db.driver', "${dbDriver}"
        property 'db.tableprefix', "${dbTableprefix}"
        property 'db.customsessionsql', "${dbCustomsessionsql}"
    }

    property 'yacceleratorstorefront.testIds.enable', 'true'
    property 'cockpit.default.useTestIds', 'true'
    property 'cockpit.ytestid.enabled', 'true'
    property 'acceleratorstorefront.testIds.enable', 'true'
    property 'backoffice.cockpit.ytestid.enabled', 'true'

    if (this.hasProperty("responsive") && "${responsive}".equalsIgnoreCase('true')) {
        property 'commerceservices.default.desktop.ui.experience', 'responsive'
        property 'uiexperience.level.supported', 'DESKTOP'
    } else {
        property 'commerceservices.default.desktop.ui.experience', 'desktop'
    }
    property 'googleApiKey', ''
}

def ext = {
    scanPathWithAutoLoad '${HYBRIS_BIN_DIR}/custom'
    scanPathWithAutoLoad '${HYBRIS_BIN_DIR}/ext-worldpay'
    scanPathWithAutoLoad '${HYBRIS_BIN_DIR}/ext-worldpaytest'
    scanPathWithAutoLoad '${HYBRIS_BIN_DIR}/ext-worldpaydemo'
    scanPathWithAutoLoad '${HYBRIS_BIN_DIR}/ext-worldpayfulfilment'
    scanPathWithAutoLoad '${HYBRIS_BIN_DIR}/ext-worldpayasm'

    extensionNames 'backoffice',
            'commercesearchbackoffice',
            'commerceservicesbackoffice',
            'solrfacetsearchbackoffice',
            'solrserver',
            'platformwebservices',
            'electronicsstore',
            'apparelstore',
            'powertoolsstore',
            'customersupportbackoffice',
            'assistedservicestorefront',
            'b2bacceleratoraddon',
            'b2bcommercebackoffice',
            'b2badmincockpit'
}

def config = {
    localProperties localProps
    extensions ext
}

task setup << {
    apply plugin: 'installer-addon-plugin'

    def pl = platform(config)
    pl.setup()

    delete "${suiteHome}/hybris/bin/custom"

    tasks.generateImpex.execute()

    pl.executeAntTarget "modulegen -Dinput.module='accelerator' -Dinput.name=${modulegenAcceleratorName} -Dinput.package=${modulegenAcceleratorPackage}"

    tasks.generateExtgenProperties.execute()

    pl.executeAntTarget "extgen -Dinput.template=${modulegenAcceleratorName}storefront -Dinput.name=${modulegenAcceleratorName}b2bstorefront -Dinput.package=${modulegenAcceleratorPackage}.${modulegenAcceleratorName}b2bstorefront"

    def defaultAddons = "worldpayaddon,worldpaynotificationaddon,worldpaysampledataaddon,assistedservicestorefront"
    def addons = "${deploymentType}".contains('demo') ? "${defaultAddons},liveeditaddon,${modulegenAcceleratorName}b2cdemo" : "${defaultAddons}"

    pl.project.addons {
        names "${addons}"
        template "yacceleratorstorefront"
        b2c "${modulegenAcceleratorName}storefront"
        b2b "${modulegenAcceleratorName}b2bstorefront"
        platform pl
    }

    pl.project.addons {
        names "b2bacceleratoraddon"
        template "yacceleratorstorefront"
        storeFronts "${modulegenAcceleratorName}b2bstorefront"
        platform pl
    }
}

task initialize << {
    def pl = platform(config)
    pl.build()
    pl.initialize()
}

task start << {
    def pl = platform(config)
    pl.startInBackground()
}

task startInDebug << {
    def pl = platform(config)
    pl.startInDebug()
}

task stop << {
    def pl = platform(config)
    pl.stopInBackground()
}

task build << {
    def pl = platform(config)
    pl.build()
}

task copyLibrary(type: Copy) {
    from "${libraryLocation}/worldpay-core-${libraryVersion}-SNAPSHOT.jar"
    from "${libraryLocation}/worldpay-core-${libraryVersion}-SNAPSHOT-javadoc.jar"

    into "${suiteHome}/hybris/bin/ext-worldpay/worldpayapi/lib/"
}

task pmd << {
    def pl = platform(config)
    pl.executeAntTarget "pmd -Dpmd.extensions=${worldpayExtensions} " +
            "-Dpmd.minimum.priority=2"
}
task jacocoTests << {
    def pl = platform(config)
    pl.executeAntTarget "jacocounittests " +
            "-f ${suiteHome}/build/jacoco/build.xml " +
            "-Dtestclasses.packages=com.worldpay.* " +
            "-Dtestclasses.extensions=${worldpayExtensions},${modulegenAcceleratorName}storefront " +
            "-Dtestclasses.addonname=${modulegenAcceleratorName}storefront"
}

task distribute << {
    ext = ext << {
        scanPathWithAutoLoad '${HYBRIS_BIN_DIR}/ext-worldpayoms'
    }

    tasks.copyLibrary.execute()
    def pl = platform(config)
    pl.setup();

    def artifactTimestamp = new SimpleDateFormat("yyyyMMdd-HHmm").format(new Date())
    def commitId = "unknownCommitId"
    if (this.hasProperty("gitCommit")) {
        commitId = gitCommit.length() < 7 ? gitCommit : gitCommit[0..7]
    }

    pl.executeAntTarget "dist " +
            "-Ddist.properties.file=${suiteHome}/build/dist/dist.properties " +
            "-Ddist.packaging.file=${suiteHome}/build/dist/packaging.properties " +
            "-Ddist.finalzipname=\"worldpayaddon-${hybrisVersion}-" + artifactTimestamp + "-" + git_branch + "-" + commitId + ".zip\""
    pl.executeAntTarget "dist " +
            "-Ddist.properties.file=${suiteHome}/build/dist/dist-test.properties " +
            "-Ddist.packaging.file=${suiteHome}/build/dist/packaging-test.properties " +
            "-Ddist.finalzipname=\"worldpayaddon-${hybrisVersion}-" + artifactTimestamp + "-" + git_branch + "-" + commitId + "-TEST.zip\""
    pl.executeAntTarget "dist " +
            "-Ddist.properties.file=${suiteHome}/build/dist/dist-demo.properties " +
            "-Ddist.packaging.file=${suiteHome}/build/dist/packaging-demo.properties " +
            "-Ddist.finalzipname=\"worldpayaddon-${hybrisVersion}-" + artifactTimestamp + "-" + git_branch + "-" + commitId + "-DEMO.zip\""
}

task trigger << {
    tasks.setup.execute()
    tasks.build.execute()
    tasks.pmd.execute()
    tasks.jacocoTests.execute()
}

task tint << {
    tasks.setup.execute()
    tasks.build.execute()

    def pl = platform(config)

    pl.initializeTestSystem()
    pl.executeAntTarget "integrationtests " +
            "-Dfailbuildonerror=yes " +
            "-Dtestclasses.extensions=${worldpayExtensions} " +
            "-Dtestclasses.addonname=${modulegenAcceleratorName}storefront "

    tasks.initialize.execute()

    pl.executeAntTarget "dist " +
            "-Ddist.properties.file=${suiteHome}/build/dist/dist.properties " +
            "-Ddist.packaging.file=${suiteHome}/build/dist/packaging.properties"
}

task integration << {
    def pl = platform(config)

    pl.initializeTestSystem()
    pl.executeAntTarget "integrationtests " +
            "-Dfailbuildonerror=yes " +
            "-Dtestclasses.extensions=${worldpayExtensions} " +
            "-Dtestclasses.addonname=${modulegenAcceleratorName}storefront "
}

task generateImpex << {
    //If no environment is defined, we won't generate an impex for now
    if (project.hasProperty("environment")) {
        def jsonFile = new File("${environment}")
        def slurper = new JsonSlurper()
        def json = slurper.parseText(jsonFile.text)

        for (storefront in json.environment.storefronts) {
            createAndPopulateImpex(storefront.key, storefront.value)
        }
    }
}

def createAndPopulateImpex(String catalog, Map storefront) {
    def fileName = "${suiteHome}/hybris/bin/ext-worldpaydemo/yworldpayb2cdemo/resources/yworldpayb2cdemo/import/contentCatalogs/" + catalog + "/cms-addon-extra.impex"
    println "generated " + fileName
    def impex = new File(fileName)
    if (impex.exists()) {
        impex.delete()
    }

    impex << '$pageTemplate=' + storefront.paymentPageTemplate + '\n'
    impex << '$mobilePageTemplate=' + storefront.mobilePaymentPageTemplate + '\n'
    impex << '$apmComponents=' + storefront.apmComponents + '\n'
    impex << '$mobileApmComponents=' + storefront.mobileApmComponents + '\n'
    impex << '$contentCatalog=' + catalog + '\n'
    impex << '$contentCV=catalogVersion(CatalogVersion.catalog(Catalog.id[default=$contentCatalog]),CatalogVersion.version[default=Staged])[default=$contentCatalog:Staged]\n'
    impex << '\nINSERT_UPDATE WorldpayPaymentPage;$contentCV[unique=true];uid[unique=true];masterTemplate(uid,$contentCV)\n'
    impex << ';;worldpayPaymentAndBillingCheckoutPage;$pageTemplate\n'
    impex << 'INSERT_UPDATE ContentSlot;$contentCV[unique=true];uid[unique=true];cmsComponents(uid,$contentCV)\n'
    impex << ';;WorldpayPaymentButtonsSlot;$apmComponents\n'

    impex << '\n#% if: !"responsive".equalsIgnoreCase(Config.getParameter("commerceservices.default.desktop.ui.experience"));\n\n'
    impex << 'INSERT_UPDATE WorldpayPaymentPage;$contentCV[unique=true];uid[unique=true];masterTemplate(uid,$contentCV)\n'
    impex << ';;mobile-worldpayPaymentAndBillingCheckoutPage;$mobilePageTemplate\n'
    impex << 'INSERT_UPDATE ContentSlot;$contentCV[unique=true];uid[unique=true];cmsComponents(uid,$contentCV)\n'
    impex << ';;MobileWorldpayPaymentButtonsSlot;$mobileApmComponents\n'
    impex << '\n#% endif:\n'
}

task generateExtgenProperties << {
    def fileName = "${suiteHome}/hybris/bin/custom/${modulegenAcceleratorName}/${modulegenAcceleratorName}storefront/extgen.properties"
    def extgen = new File(fileName)
    println "generated " + fileName
    if (extgen.exists()) {
        extgen.delete()
    }

    extgen << "YEXTNAME_TOKEN=${modulegenAcceleratorName}storefront\n"
    extgen << "YMODULE_TOKEN=${modulegenAcceleratorName}\n"
    extgen << "YMODULE_PACKAGE_ROOT=storefront\n"
    extgen << "YMODULE_CLASS_PREFIX=Storefront\n"
    extgen << "YPACKAGE_TOKEN=${modulegenAcceleratorPackage}.${modulegenAcceleratorName}storefront\n"
    extgen << "YMANAGER_TOKEN=${modulegenAcceleratorName}StorefrontManager\n"
    extgen << "YCLASSPREFIX_TOKEN=${modulegenAcceleratorName}Storefront\n"
    extgen << "YGENERATED_TOKEN=Generated\n"
}
